/* SPDX-License-Identifier: GPL-2.0-or-later */
/*
 * Copyright (c) 2020-2023 Dorian Stoll
 *
 * Linux driver for Intel Precise Touch & Stylus
 */

#ifndef IPTS_SPEC_HID_H
#define IPTS_SPEC_HID_H

#include <linux/build_bug.h>
#include <linux/types.h>

/*
 * IPTS_HID_FRAME_TYPE_RAW - Made-up type for passing IPTS data frames in a HID report.
 */
#define IPTS_HID_FRAME_TYPE_RAW 0xEE

/**
 * IPTS_HID_REPORT_SINGLETOUCH - The HID report ID of a fallback singletouch report.
 *
 * Singletouch reports are generated by the hardware with this ID, so this value is
 * dicated by the hardware / spec!
 */
#define IPTS_HID_REPORT_SINGLETOUCH 64

/**
 * IPTS_HID_REPORT_DATA - The HID report ID of data report for EDS v1 devices.
 *
 * This report is synthesized in software, so this only needs to line up with
 * &ipts_fallback_descriptor.
 *
 * Userspace should not rely on this ID and instead find the report through the HID descriptor.
 */
#define IPTS_HID_REPORT_DATA 65

/**
 * IPTS_HID_REPORT_SET_MODE - The HID report ID for switching modes on EDS v1 devices.
 *
 * This feature report is parsed / synthesized in software, so this only needs to line up with
 * &ipts_fallback_descriptor.
 *
 * Userspace should not rely on this ID and instead find the report through the HID descriptor.
 */
#define IPTS_HID_REPORT_SET_MODE 66

/**
 * IPTS_HID_REPORT_DATA_SIZE - The amount of raw data in the data report for EDS v1 devices.
 *
 * Taken from the native HID implementation on Surface Pro 7 and later.
 *
 * The data report is synthesized in software, so this only needs to line up with
 * &ipts_fallback_descriptor.
 *
 * Userspace should not rely on this value and instead find the size through the HID descriptor.
 */
#define IPTS_HID_REPORT_DATA_SIZE 7485

/**
 * ipts_singletouch_descriptor - The singletouch descriptor.
 *
 * This descriptor should be present on all IPTS devices to support the fallback
 * singletouch inputs when no userspace processing is available.
 *
 * This is not a part of the native HID descriptor on EDS v2 devices.
 */
static const u8 ipts_singletouch_descriptor[] = {
	0x05, 0x0D,	  /*  Usage Page (Digitizer),            */
	0x09, 0x04,	  /*  Usage (Touchscreen),               */
	0xA1, 0x01,	  /*  Collection (Application),          */
	0x85, 0x40,	  /*      Report ID (64),                */
	0x09, 0x42,	  /*      Usage (Tip Switch),            */
	0x15, 0x00,	  /*      Logical Minimum (0),           */
	0x25, 0x01,	  /*      Logical Maximum (1),           */
	0x75, 0x01,	  /*      Report Size (1),               */
	0x95, 0x01,	  /*      Report Count (1),              */
	0x81, 0x02,	  /*      Input (Variable),              */
	0x95, 0x07,	  /*      Report Count (7),              */
	0x81, 0x03,	  /*      Input (Constant, Variable),    */
	0x05, 0x01,	  /*      Usage Page (Desktop),          */
	0x09, 0x30,	  /*      Usage (X),                     */
	0x75, 0x10,	  /*      Report Size (16),              */
	0x95, 0x01,	  /*      Report Count (1),              */
	0xA4,		  /*      Push,                          */
	0x55, 0x0E,	  /*      Unit Exponent (14),            */
	0x65, 0x11,	  /*      Unit (Centimeter),             */
	0x46, 0x76, 0x0B, /*      Physical Maximum (2934),       */
	0x26, 0xFF, 0x7F, /*      Logical Maximum (32767),       */
	0x81, 0x02,	  /*      Input (Variable),              */
	0x09, 0x31,	  /*      Usage (Y),                     */
	0x46, 0x74, 0x06, /*      Physical Maximum (1652),       */
	0x26, 0xFF, 0x7F, /*      Logical Maximum (32767),       */
	0x81, 0x02,	  /*      Input (Variable),              */
	0xB4,		  /*      Pop,                           */
	0xC0,		  /*  End Collection                     */
};

/**
 * ipts_fallback_descriptor - The fallback descriptor for devices without native HID support.
 *
 * This exposes the most important functions of IPTS to userspace: A report that will contain
 * multitouch touchscreen data, as well as a feature report for changing between singletouch and
 * multitouch modes.
 *
 * The report definitions and usage values are based on the HID descriptor for Surface Pro 7.
 * Userspace should rely on the usage values and not on the report IDs to find the needed reports.
 */
static const u8 ipts_fallback_descriptor[] = {
	0x05, 0x0D,	  /*  Usage Page (Digitizer),            */
	0x09, 0x0F,	  /*  Usage (Capacitive Hm Digitizer),   */
	0xA1, 0x01,	  /*  Collection (Application),          */
	0x85, 0x41,	  /*      Report ID (65),                */
	0x09, 0x56,	  /*      Usage (Scan Time),             */
	0x95, 0x01,	  /*      Report Count (1),              */
	0x75, 0x10,	  /*      Report Size (16),              */
	0x81, 0x02,	  /*      Input (Variable),              */
	0x09, 0x61,	  /*      Usage (Gesture Char Quality),  */
	0x75, 0x08,	  /*      Report Size (8),               */
	0x96, 0x3D, 0x1D, /*      Report Count (7485),           */
	0x81, 0x03,	  /*      Input (Constant, Variable),    */
	0x85, 0x42,	  /*      Report ID (66),                */
	0x06, 0x00, 0xFF, /*      Usage Page (FF00h),            */
	0x09, 0xC8,	  /*      Usage (C8h),                   */
	0x75, 0x08,	  /*      Report Size (8),               */
	0x95, 0x01,	  /*      Report Count (1),              */
	0xB1, 0x02,	  /*      Feature (Variable),            */
	0xC0,		  /*  End Collection                     */
};

/**
 * struct ipts_hid_data_header - Header for touch data inside of &struct ipts_hid_report.
 *
 * For wrapping the IPTS data frames produced by devices that do not natively support HID we reuse
 * an existing implementation. This header is prefixed to raw touch data on Surface Pro 7 and
 * later devices (which natively support HID).
 *
 * Since the format of the data following this header is different as well, we are using a made-up
 * type ID to signal this difference to userspace.
 *
 * @size:
 *     Size of the data in bytes, including this header.
 *
 * @reserved1:
 *     Unknown value.
 *
 * @type:
 *     The type of the data in this report.
 *     For wrapping IPTS data frames, this should be %IPTS_HID_FRAME_TYPE_RAW.
 *
 * @reserved2:
 *     Unknown value.
 *
 * @data:
 *     The contents of the report after this header.
 *
 */
struct ipts_hid_data_header {
	u32 size;
	u8 reserved1;
	u8 type;
	u8 reserved2;
	u8 data[];
} __packed;

static_assert(sizeof(struct ipts_hid_data_header) == 7);

/**
 * struct ipts_hid_report_data - A HID report structure to wrap IPTS data frames.
 *
 * For wrapping the IPTS data frames produced by devices that do not natively support HID we reuse
 * an existing implementation. This report structure is how the Surface Pro 7 and later
 * devices (which natively support HID) pass raw touch data to userspace for further processing.
 *
 * @report_id:
 *     The ID of the HID report. For EDS v1 devices, this should be %IPTS_HID_REPORT_DATA.
 *
 * @scan_time:
 *     A timestamp that indicates when the data was generated.
 *
 * @gesture_char_quality:
 *     The raw data plus a small header.
 */
struct ipts_hid_report_data {
	u8 report_id;
	u16 scan_time;
	struct ipts_hid_data_header gesture_char_quality;
} __packed;

static_assert(sizeof(struct ipts_hid_report_data) == 10);

/**
 * struct ipts_hid_report_set_mode - A HID report structure to switch modes on EDS v1 devices.
 *
 * For wrapping the IPTS data frames produced by devices that do not natively support HID we reuse
 * an existing implementation. This report structure is how the Surface Pro 7 and later
 * devices (which natively support HID) switch between singletouch and multitouch / raw data mode.
 *
 * @report_id:
 *     The ID of the HID report. For EDS v1 devices, this should be %IPTS_HID_REPORT_SET_MODE.
 *
 * @mode:
 *     The desired sensor mode. See &enum ipts_mode.
 */
struct ipts_hid_report_set_mode {
	u8 report_id;
	u8 mode;
} __packed;

static_assert(sizeof(struct ipts_hid_report_set_mode) == 2);

#endif /* IPTS_SPEC_HID_H */
